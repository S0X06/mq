// Code generated by protoc-gen-go. DO NOT EDIT.
// source: receive.proto

package receve

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ack struct {
	OrderSn              string   `protobuf:"bytes,1,opt,name=OrderSn,proto3" json:"OrderSn,omitempty"`
	Ack                  int32    `protobuf:"varint,2,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0d471e966fe4b4e, []int{0}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetOrderSn() string {
	if m != nil {
		return m.OrderSn
	}
	return ""
}

func (m *Ack) GetAck() int32 {
	if m != nil {
		return m.Ack
	}
	return 0
}

type Receive struct {
	OrderSn              string   `protobuf:"bytes,1,opt,name=order_sn,json=orderSn,proto3" json:"order_sn,omitempty"`
	AppId                string   `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Notify               string   `protobuf:"bytes,3,opt,name=notify,proto3" json:"notify,omitempty"`
	Data                 string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Receive) Reset()         { *m = Receive{} }
func (m *Receive) String() string { return proto.CompactTextString(m) }
func (*Receive) ProtoMessage()    {}
func (*Receive) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0d471e966fe4b4e, []int{1}
}

func (m *Receive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Receive.Unmarshal(m, b)
}
func (m *Receive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Receive.Marshal(b, m, deterministic)
}
func (m *Receive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receive.Merge(m, src)
}
func (m *Receive) XXX_Size() int {
	return xxx_messageInfo_Receive.Size(m)
}
func (m *Receive) XXX_DiscardUnknown() {
	xxx_messageInfo_Receive.DiscardUnknown(m)
}

var xxx_messageInfo_Receive proto.InternalMessageInfo

func (m *Receive) GetOrderSn() string {
	if m != nil {
		return m.OrderSn
	}
	return ""
}

func (m *Receive) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *Receive) GetNotify() string {
	if m != nil {
		return m.Notify
	}
	return ""
}

func (m *Receive) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Response struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0d471e966fe4b4e, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Ack)(nil), "receve.Ack")
	proto.RegisterType((*Receive)(nil), "receve.Receive")
	proto.RegisterType((*Response)(nil), "receve.Response")
}

func init() { proto.RegisterFile("receive.proto", fileDescriptor_b0d471e966fe4b4e) }

var fileDescriptor_b0d471e966fe4b4e = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x3d, 0x4f, 0xc3, 0x30,
	0x14, 0x24, 0xa4, 0x49, 0x9b, 0x47, 0x11, 0xd5, 0x93, 0x40, 0x86, 0xa9, 0xca, 0x54, 0x31, 0x04,
	0x01, 0xbf, 0xa0, 0x23, 0x12, 0x12, 0xc8, 0xb0, 0x57, 0xae, 0xfd, 0x68, 0xad, 0x40, 0x6c, 0xd9,
	0xa1, 0x52, 0xff, 0x3d, 0xb2, 0xf3, 0xc1, 0xd2, 0xed, 0xee, 0xf2, 0xee, 0x2e, 0x3e, 0xb8, 0x74,
	0x24, 0x49, 0x1f, 0xa8, 0xb2, 0xce, 0xb4, 0x06, 0xf3, 0x40, 0x0f, 0x54, 0x3e, 0x42, 0xba, 0x96,
	0x35, 0x32, 0x98, 0xbe, 0x39, 0x45, 0xee, 0xa3, 0x61, 0xc9, 0x32, 0x59, 0x15, 0x7c, 0xa0, 0xb8,
	0x80, 0x54, 0xc8, 0x9a, 0x9d, 0x2f, 0x93, 0x55, 0xc6, 0x03, 0x2c, 0x77, 0x30, 0xe5, 0x5d, 0x16,
	0xde, 0xc2, 0xcc, 0x84, 0xbb, 0x8d, 0x1f, 0x7d, 0xa6, 0xf7, 0x5d, 0x43, 0x2e, 0xac, 0xdd, 0x68,
	0x15, 0xad, 0x05, 0xcf, 0x84, 0xb5, 0x2f, 0x0a, 0x6f, 0x20, 0x6f, 0x4c, 0xab, 0xbf, 0x8e, 0x2c,
	0x8d, 0x72, 0xcf, 0x10, 0x61, 0xa2, 0x44, 0x2b, 0xd8, 0x24, 0xaa, 0x11, 0x97, 0xaf, 0x30, 0xe3,
	0xe4, 0xad, 0x69, 0x3c, 0x85, 0xef, 0xd2, 0x28, 0x8a, 0x2d, 0x19, 0x8f, 0x38, 0xfc, 0xf4, 0x0f,
	0x79, 0x2f, 0x76, 0xd4, 0x77, 0x0c, 0x74, 0x4c, 0x0b, 0x1d, 0xf3, 0x2e, 0xed, 0x69, 0x0f, 0x05,
	0x27, 0xa9, 0xad, 0xa6, 0xa6, 0xc5, 0x7b, 0x48, 0x3f, 0xdd, 0x11, 0xaf, 0xaa, 0x6e, 0x86, 0xaa,
	0x7f, 0xd0, 0xdd, 0xe2, 0x5f, 0xe8, 0x8a, 0xcb, 0x33, 0x7c, 0x80, 0xf9, 0xfb, 0xef, 0xf6, 0x5b,
	0xfb, 0x3d, 0xb9, 0xb0, 0xd5, 0xc5, 0x70, 0xb3, 0x96, 0xf5, 0x29, 0xc3, 0x36, 0x8f, 0x13, 0x3f,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x61, 0xdb, 0x06, 0x14, 0x73, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecipientClient is the client API for Recipient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecipientClient interface {
	Try(ctx context.Context, in *Receive, opts ...grpc.CallOption) (*Response, error)
	PublisherAck(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Response, error)
}

type recipientClient struct {
	cc *grpc.ClientConn
}

func NewRecipientClient(cc *grpc.ClientConn) RecipientClient {
	return &recipientClient{cc}
}

func (c *recipientClient) Try(ctx context.Context, in *Receive, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/receve.Recipient/Try", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipientClient) PublisherAck(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/receve.Recipient/PublisherAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipientServer is the server API for Recipient service.
type RecipientServer interface {
	Try(context.Context, *Receive) (*Response, error)
	PublisherAck(context.Context, *Ack) (*Response, error)
}

// UnimplementedRecipientServer can be embedded to have forward compatible implementations.
type UnimplementedRecipientServer struct {
}

func (*UnimplementedRecipientServer) Try(ctx context.Context, req *Receive) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Try not implemented")
}
func (*UnimplementedRecipientServer) PublisherAck(ctx context.Context, req *Ack) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublisherAck not implemented")
}

func RegisterRecipientServer(s *grpc.Server, srv RecipientServer) {
	s.RegisterService(&_Recipient_serviceDesc, srv)
}

func _Recipient_Try_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Receive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipientServer).Try(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receve.Recipient/Try",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipientServer).Try(ctx, req.(*Receive))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipient_PublisherAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipientServer).PublisherAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receve.Recipient/PublisherAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipientServer).PublisherAck(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recipient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "receve.Recipient",
	HandlerType: (*RecipientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Try",
			Handler:    _Recipient_Try_Handler,
		},
		{
			MethodName: "PublisherAck",
			Handler:    _Recipient_PublisherAck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "receive.proto",
}
