// Code generated by protoc-gen-go. DO NOT EDIT.
// source: answer.proto

package answer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ack struct {
	OrderSn              string   `protobuf:"bytes,1,opt,name=OrderSn,proto3" json:"OrderSn,omitempty"`
	Ack                  int32    `protobuf:"varint,2,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f97dbee99679ee, []int{0}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetOrderSn() string {
	if m != nil {
		return m.OrderSn
	}
	return ""
}

func (m *Ack) GetAck() int32 {
	if m != nil {
		return m.Ack
	}
	return 0
}

type Response struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6f97dbee99679ee, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Ack)(nil), "answer.Ack")
	proto.RegisterType((*Response)(nil), "answer.Response")
}

func init() { proto.RegisterFile("answer.proto", fileDescriptor_c6f97dbee99679ee) }

var fileDescriptor_c6f97dbee99679ee = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0xc1, 0xae, 0x82, 0x30,
	0x10, 0x45, 0x5f, 0x1f, 0x82, 0x32, 0xb2, 0x20, 0xb3, 0x6a, 0x5c, 0x11, 0x56, 0x5d, 0x91, 0x88,
	0x5f, 0xc0, 0xde, 0x44, 0x53, 0xbf, 0xa0, 0x96, 0x89, 0x0b, 0x22, 0x25, 0x2d, 0xd1, 0xdf, 0x37,
	0x1d, 0xed, 0xee, 0x9c, 0x64, 0xee, 0xcc, 0x1d, 0xa8, 0xcc, 0x1c, 0xde, 0xe4, 0xbb, 0xc5, 0xbb,
	0xd5, 0x61, 0xf1, 0xb5, 0xf6, 0x08, 0xd9, 0x60, 0x27, 0x94, 0xb0, 0xbd, 0xf8, 0x91, 0xfc, 0x6d,
	0x96, 0xa2, 0x11, 0xaa, 0xd4, 0x49, 0xb1, 0x86, 0xcc, 0xd8, 0x49, 0xfe, 0x37, 0x42, 0xe5, 0x3a,
	0x62, 0x7b, 0x86, 0x9d, 0xa6, 0xb0, 0xb8, 0x39, 0x10, 0x22, 0x6c, 0xac, 0x1b, 0x89, 0x43, 0xb9,
	0x66, 0x8e, 0xbb, 0x9e, 0x14, 0x82, 0x79, 0x10, 0xa7, 0x4a, 0x9d, 0x34, 0x4e, 0x8f, 0x66, 0x35,
	0x32, 0x6b, 0x84, 0xaa, 0x34, 0x73, 0xdf, 0x43, 0x31, 0x70, 0x15, 0x54, 0x90, 0x5f, 0xbd, 0x7b,
	0x11, 0xee, 0xbb, 0x5f, 0xd5, 0xc1, 0x4e, 0x87, 0x3a, 0x49, 0xba, 0xd9, 0xfe, 0xdd, 0x0b, 0xfe,
	0xe1, 0xf4, 0x09, 0x00, 0x00, 0xff, 0xff, 0x81, 0xb5, 0x27, 0xd4, 0xd3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnswerClient is the client API for Answer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnswerClient interface {
	Prove(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Response, error)
}

type answerClient struct {
	cc *grpc.ClientConn
}

func NewAnswerClient(cc *grpc.ClientConn) AnswerClient {
	return &answerClient{cc}
}

func (c *answerClient) Prove(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/answer.Answer/Prove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnswerServer is the server API for Answer service.
type AnswerServer interface {
	Prove(context.Context, *Ack) (*Response, error)
}

// UnimplementedAnswerServer can be embedded to have forward compatible implementations.
type UnimplementedAnswerServer struct {
}

func (*UnimplementedAnswerServer) Prove(ctx context.Context, req *Ack) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prove not implemented")
}

func RegisterAnswerServer(s *grpc.Server, srv AnswerServer) {
	s.RegisterService(&_Answer_serviceDesc, srv)
}

func _Answer_Prove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServer).Prove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/answer.Answer/Prove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServer).Prove(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

var _Answer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "answer.Answer",
	HandlerType: (*AnswerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prove",
			Handler:    _Answer_Prove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "answer.proto",
}
